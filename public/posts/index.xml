<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on </title>
    <link>https://www.debdebnath.com/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- 0.141.0</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jan 2025 10:38:06 -0500</lastBuildDate>
    <atom:link href="https://www.debdebnath.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resource Acquisition Is Initialization</title>
      <link>https://www.debdebnath.com/posts/raii/</link>
      <pubDate>Tue, 21 Jan 2025 10:38:06 -0500</pubDate>
      <guid>https://www.debdebnath.com/posts/raii/</guid>
      <description>&lt;p&gt;Resource acquisition is initialization (RAII) refers to a programming technique for resource management where the resource acquired by an object when it is initialized is released when the object is destroyed. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;To explain RAII by example, I will use programs written in C++.&lt;/p&gt;
&lt;h3 id=&#34;the-setup&#34;&gt;The setup&lt;/h3&gt;
&lt;p&gt;For the sake of simplicity, the example will involve allocation of memory on the heap for a floating point variable.&lt;/p&gt;
&lt;p&gt;A variable &lt;code&gt;x&lt;/code&gt; declared on the heap is assigned &lt;code&gt;3.14&lt;/code&gt;, used and then deleted, freeing up the memory allocated to it when it was declared. Trying to access it after it has been deleted causes &amp;ldquo;undefined behavior&amp;rdquo; that is dependent on the compiler you use, as deletion of the resource associated with &lt;code&gt;x&lt;/code&gt; makes it a dangling pointer.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
